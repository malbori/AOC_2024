from collections import defaultdict


def parse_input(filename):
    """Reads the input file and returns the grid as a list of strings."""
    with open(filename, "r") as f:
        return f.read().splitlines()


def on_grid(pos, grid):
    """Checks if a position (x, y) is within the bounds of the grid."""
    m, n = len(grid), len(grid[0])  # Grid dimensions
    return 0 <= pos[0] < n and 0 <= pos[1] < m  # Note: (x, y) in (columns, rows)


def find_antinodes(n1, n2, grid):
    """
    Finds antinodes generated by a pair of antenna positions (n1, n2).
    Antinodes are calculated by projecting the line connecting the antennas.
    """
    dy, dx = n1[1] - n2[1], n1[0] - n2[0]
    nodes = []

    # Extend outward from n1
    k = 0
    p = n1
    while on_grid(p, grid):
        nodes.append(p)
        k += 1
        p = (n1[0] + k * dx, n1[1] + k * dy)

    # Extend outward from n2
    k = 0
    p = n2
    while on_grid(p, grid):
        nodes.append(p)
        k += 1
        p = (n2[0] - k * dx, n2[1] - k * dy)

    return nodes


def group_antennas(grid):
    """Groups antenna positions by frequency using a defaultdict."""
    nodes = defaultdict(list)
    for j, line in enumerate(grid):
        for i, obj in enumerate(line.strip()):
            if obj != ".":  # Ignore empty spaces
                nodes[obj].append((i, j))  # Append (x, y) positions
    return nodes


def calculate_unique_antinodes(grid):
    """Calculates the total unique antinodes on the grid."""
    nodes = group_antennas(grid)
    antinodes = []

    # Find all antinodes for each frequency
    for _, positions in nodes.items():
        for n1, n2 in (
            (p, q) for i, p in enumerate(positions[:-1]) for q in positions[i + 1 :]
        ):
            antinodes.extend(find_antinodes(n1, n2, grid))

    # Filter and count unique valid antinodes
    unique_antinodes = {pos for pos in antinodes if on_grid(pos, grid)}
    return len(unique_antinodes)


def main():
    grid = parse_input("solutions/day08/input.txt")
    result = calculate_unique_antinodes(grid)
    print("Total unique antinodes:", result)


if __name__ == "__main__":
    main()
